# ⚠️ NOTE: If you are on Apple Silicon (arm64), build with:
#     docker build --platform=linux/amd64 -f Dockerfile.inla .
# INLA base image is only available for amd64

FROM ivargr/r_inla

# Copy uv and uvx CLI tools from base Python/uv image
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Set up env vars for uv and Python
ENV UV_COMPILE_BYTECODE=1 \
    UV_LINK_MODE=copy \
    PATH="/app/.venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Install system dependencies in one efficient layer
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    git \
    libncurses-dev \
    libreadline-dev \
    libbz2-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy only dependency files first for better layer caching
COPY pyproject.toml uv.lock ./

# Install Python dependencies only (no dev, no project code yet)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-install-project --no-dev

# Copy application source files
COPY chap_core/ chap_core/
COPY config/ config/
COPY README.md .

# Install the project itself now that dependencies are cached
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev
